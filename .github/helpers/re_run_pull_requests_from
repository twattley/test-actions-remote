#!/usr/bin/env ruby
require 'octokit'

# Usage: re_run_pull_requests_from <repo> [<base_branch_name>] [<check_run_name>]
# This will re-trigger the Github jobs belonging to Pull Requests' check suites that are based on a given branch.
# To be used to re-run jobs when the base branch of a Pull Request has diverged.
# Parameters:
# * <repo>: The Github repository slug.
# * <base_branch_name>: The branch name that has diverged (defaults to main).
# * <check_run_name>: Name of the check name to be re-run (defaults to all check names).
# Used environment variables:
# * OCTOKIT_ACCESS_TOKEN: Personal Access Token to be used to connect to Github API.

repo, base_branch_name, check_run_name = ARGV[0..2]
raise 'Please specify a Github repository slug as argument' if repo.nil?
base_branch_name ||= 'main'

errors = []
client = Octokit::Client.new
client.pull_requests(repo).select { |pr| pr.base.ref == base_branch_name }.map { |pr| pr.head.ref }.each do |branch|
  client.check_runs_for_ref(repo, branch).check_runs.select { |cr| check_run_name.nil? || cr.name == check_run_name }.group_by(&:name).each do |check_run_name, check_runs|
    puts "Re-request run of check suite named #{check_run_name} in repo #{repo} for Pull Request having #{branch} targetting #{base_branch_name}"
    begin
      client.rerequest_check_suite(repo, check_runs.sort_by(&:started_at).last.check_suite.id)
    rescue
      puts "!!! Error while requesting new check-suite run #{check_run_name}: #{$!}"
      errors << $!
    end
  end
end

# Just raise the first one to make sure we end with a non-zero error code.
raise errors.first unless errors.empty?
